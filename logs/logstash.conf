input {
  http {
    port => "${PORT}"
    user => "${USER}"
    password => "${PASSWORD}"
  }
}

filter {
  #######################################
  # 1️⃣ Handle JSON vs key=value logs
  #######################################

  if [message] =~ /^\s*{/ {
    # JSON log
    json {
      source => "message"
      target => "msg"
      remove_field => ["message"]
      tag_on_failure => ["_jsonparsefailure"]
      skip_on_invalid_json => true
    }

    # Optional: parse inner comma-separated message inside JSON
    if [msg][message] {
      kv {
        source => "[msg][message]"
        field_split => ", "
      }
    }
  } else {
    # Key=value log
    kv {
      source => "message"
      field_split => " "
      value_split => "="
      trim_key => "\""
      trim_value => "\""
    }

    # Convert numeric fields
    mutate {
      convert => {
        "status" => "integer"
        "duration" => "float"
        "bytes" => "integer"
      }
    }
  }

  #######################################
  # 2️⃣ Optional grok + kv for URLs
  #######################################
  if [headers][request_path] {
    grok {
      match => { "[headers][request_path]" => "%{URIPARAM:url}" }
      remove_field => ["headers"]
    }

    kv {
      source => "url"
      field_split => "&"
      trim_key => "?"
    }
  }

  #######################################
  # 3️⃣ Common field renames & ECS mapping
  #######################################
  mutate {
    remove_field => ["host"]
    rename => {
      "appname" => "source"
      "hostname" => "container"
    }
    add_field => {
      "[host][name]" => "%{source}"
      "[host][container]" => "%{container}"
    }
  }

  # Optional: tag JSON parse failures
  if "_jsonparsefailure" in [tags] {
    mutate {
      add_tag => ["kv_fallback"]
    }
  }
}

output {
  elasticsearch {
    hosts => "${ELASTICSEARCH_HOST}"
    user => "${ELASTICSEARCH_USER}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "logs-${ENVIRONMENT}-%{+YYYY.MM.dd}"
    action => "create"
  }

  # Optional: stdout for debugging
  stdout {
    codec => rubydebug
  }
}
